---
- name: Preflight to add hosts to inventory
  hosts: localhost
  gather_facts: false
  vars:
    suffix: "{{ app_suffix | mandatory }}"
    prefix: "{{ app_prefix | mandatory }}"
    version: "{{ app_version | mandatory }}"

- name: Gather facts from existing cluster
  hosts: mycluster



- name: Preflight to set up machine specific variables
  hosts: localhost
  gather_facts: false
  vars:
    old_hosts: "{{ hostvars.values() | selectattr('openstack', 'defined') | map(attribute='openstack')  | map(attribute='name') | select('match', prefix) | unique | list | difference(groups.mycluster)  }}"
    web_hosts: "{{ old_hosts | select('match', 'web') | list }}"
    app_hosts: "{{ old_hosts | select('match', 'app') | list }}"
    lb_hosts: "{{ old_hosts | select('match', 'lb') | list }}"
  tasks:

    - name: Add current web hosts to web group
      add_host:
        name: "{{ item }}"
        groups: mycluster_old
      with_items: "{{ web_hosts }}"

    - name: Add current app hosts to app group
      add_host:
        name: "{{ item }}"
        groups: mycluster_old
      with_items: "{{ app_hosts }}"

    - name: Add current loadbalancer hosts to loadbalancer group
      add_host:
        name: "{{ item }}"
        groups: mycluster_old
      with_items: "{{ lb_hosts }}"


- name: Add new hosts to inventory
  hosts: localhost
  gather_facts: false
  tasks:

    - name: Add loadbalancer to inventory
      add_host:
        name: "{{ prefix }}-lb-{{ app_version }}"
        groups: mycluster,loadbalancer,mycluster_new,loadbalancer_new

    - name: Add web hosts to inventory
      add_host:
        name: "{{ prefix }}-web-{{ app_version }}-{{ item }}"
        groups: mycluster,web,mycluster_new
      with_sequence: count=2

    - name: Add app hosts to inventory
      add_host:
        name: "{{ prefix }}-app-{{ app_version }}-{{ item }}"
        groups: mycluster,app,mycluster_new
      with_sequence: count=2



- name: Provision a set of hosts in the Catalyst Cloud
  hosts: localhost
  gather_facts: false
  vars:
    host_set: "{{ groups.mycluster_new | unique | list }}"
    public_hosts: "{{ groups.loadbalancer_new | unique | list }}"
    security_groups: "{{ host_set | map('extract', hostvars, 'security_groups') | sum(start=[]) | unique | list }}"

    security_group_names: "{{ security_groups | map(attribute='group') | unique | list }}"

  roles:
    - role: os-provision

  post_tasks:

    - name: Remove floating ip from known hosts file
      known_hosts:
        name: "{{ item }}"
        state: absent
      with_items: "{{ host_set }}"

    - include_tasks: tasks/update-ssh-config.yml
      vars:
        ip: "{{ hostvars[item].private_v4 }}"
      with_items: "{{ groups.mycluster_new  }}"

- name: Basic host setup
  hosts: bastion
  become: true
  gather_facts: false
  vars:
    host_set: "{{ groups.mycluster_new  | union(groups.db)}}"
  roles:
    - role: common


- name: Basic host setup
  hosts: mycluster_new
  become: true
  gather_facts: false
  vars:
    host_set: "{{ groups.mycluster }}"
  roles:
    - role: common

- name: Set up app server
  hosts: app:&mycluster_new
  become: true
  tasks:

    - import_tasks: tasks/setup-app.yml

    - meta: flush_handlers

    - name: Wait for gunicorn to be up and running
      wait_for:
        port: 5000

  handlers:
    - name: restart gunicorn
      systemd:
        name: gunicorn
        state: restarted


- name: Set up nginx on web server
  hosts: web:&mycluster_new
  become: true
  tasks:

    - import_tasks: tasks/setup-nginx.yml

    - meta: flush_handlers

    - name: Wait for nginx to be up and running
      wait_for:
        port: 80

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted



- name: Set up loadbalancer
  hosts: loadbalancer:&mycluster_new
  become: true
  tasks:

    - import_tasks: tasks/setup-haproxy.yml

    - meta: flush_handlers

    - name: Wait for haproxy to listen on port 80
      wait_for:
        port: 80

  handlers:
    - name: restart haproxy
      systemd: 
        name: haproxy
        state: restarted

    - name: restart rsyslog
      service:
        name: rsyslog
        state: restarted


- name: Extra set up for web demo
  hosts: loadbalancer_new
  become: true
  gather_facts: false
  tasks:

    - name: Remove fake domain from /etc/hosts
      delegate_to: localhost
      become: yes
      blockinfile:
        dest: /etc/hosts
        state: absent
        marker: "# {mark} ANSIBLE MANAGED BLOCK for my-app.cat"

    - name: "Add fake domain to /etc/hosts"
      delegate_to: localhost
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ floating_ip }} my-app.cat
        marker: "# {mark} ANSIBLE MANAGED BLOCK for my-app.cat"



  
