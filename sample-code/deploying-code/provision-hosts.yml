---
- name: Make sure variables are defined before starting
  hosts: localhost
  gather_facts: false
  vars:
    app_prefix: "{{ prefix | mandatory }}"

- name: Preflight to set up machine specific variables
  hosts: cluster
  gather_facts: false


- name: Provision a set of hosts in the Catalyst Cloud
  hosts: localhost
  gather_facts: false
  vars:
    host_set: "{{ groups.cluster | unique | list }}"
    # change if required or override at runtime using --extra-vars

    security_groups: "{{ host_set | map('extract', hostvars, 'security_groups') | sum(start=[]) | unique | list }}"

    security_group_names: "{{ security_groups | map(attribute='group') | unique | list }}"

  tasks:

    - name: Connect to Catalyst Cloud
      os_auth:
        cloud: "{{ cloud_name }}"

    - name: Create keypair
      os_keypair:
        cloud: "{{ cloud_name }}"
        name: "{{ keypair_name }}"
        public_key: "{{ ssh_public_key }}"

    - name: Create Network
      os_network:
        cloud: "{{ cloud_name }}"
        name: "{{ network_name }}"
        state: present

    - name: Create subnet
      os_subnet:
        cloud: "{{ cloud_name }}"
        name: "{{ subnet_name }}"
        network_name: "{{ network_name }}"
        state: present
        cidr: "{{ subnet_cidr }}"
        allocation_pool_start: "{{ subnet_dhcp_start }}"
        allocation_pool_end: "{{ subnet_dhcp_end }}"
        ip_version: 4
        dns_nameservers: "{{ default_nameservers }}"

    - name: Create router
      os_router:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ router_name }}"
        network: "{{ public_net_name }}"
        interfaces:
          - "{{ subnet_name }}"

    - name: Create security groups
      os_security_group:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ item }}"
      with_items: "{{ security_group_names }}"

    - name: Add rules for security group
      os_security_group_rule:
        cloud: "{{ cloud_name }}"
        state: present
        security_group: "{{ item.group }}"
        protocol: "{{ item.proto | default('tcp') }}"
        port_range_min: "{{ omit if item.port == 'any' else item.port }}"
        port_range_max: "{{ omit if item.port == 'any' else item.port_end | default(item.port) }}"
        remote_ip_prefix: "{{ item.remote_ip_prefix | default(omit) }}"
        remote_group: "{{ item.remote_group | default(omit) }}"
      with_items: "{{ security_groups }}"


    - name: Create cluster instances
      os_server:
        cloud: "{{ cloud_name }}"
        state: present
        name: "{{ item }}"
        image: "{{ default_os_image }}"
        key_name: "{{ keypair_name  }}"
        flavor: "{{ default_flavor }}"
        auto_ip: no
        nics:
          - net-name: "{{ network_name }}"
        security_groups: "default,{{ hostvars[item].security_groups | map(attribute='group') | list | unique | join(',')}}"
        userdata: |
                  #cloud-config
                  datasource:
                    OpenStack:
                      metadata_urls: ["http://169.254.169.254"]
                      max_wait: -1
                  users:
                    - name: "{{ hostvars[item].ansible_user }}"
                      shell: /bin/bash
                      lock_passwd: true
                      sudo: ALL=(ALL) NOPASSWD:ALL
                      ssh_authorized_keys:
                        - "{{ hostvars[item].ssh_public_key }}"
      with_items: "{{ host_set }}"
      register: launch

    - name: Append info for launched machines to host info
      add_host:
        name: "{{ item.openstack.name }}"
        ansible_host: "{{ item.openstack.private_v4 }}"
      with_items: "{{ launch.results }}"

    - name: Assign floating ips
      os_floating_ip:
        cloud: "{{ cloud_name }}"
        state: present
        reuse: yes
        wait: true
        server: "{{ item }}"
      register: floating_ip_info
      with_items:
        - "{{ groups.bastion }}"

    - name: Append floating ip to host info
      add_host:
        name: "{{ item.item }}"
        ansible_host: "{{ item.floating_ip.floating_ip_address }}" 
      with_items: "{{ floating_ip_info.results }}"

    - name: Remove private IPv4 from all machines from known hosts
      known_hosts:
        name: "{{ item.openstack.private_v4 }}"
        state: absent
      with_items: "{{ launch.results }}"

    - name: Remove floating ip from known hosts
      known_hosts:
        name: "{{ item.floating_ip.floating_ip_address }}"
        state: absent
      with_items: "{{ floating_ip_info.results }}"

    - name: Remove inventory host from known_hosts
      known_hosts:
        name: "{{ item }}"
        state: absent
      with_items: "{{ host_set }}"

    #- name: "Add cluster to local ~/.ssh/config"
      #blockinfile:
        #dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        #insertbefore: BOF
        #block: |
          #Host {{ item }}
              #User {{ hostvars[item].ansible_user }}
              #StrictHostKeyChecking no
              #{{ hostvars[item].ssh_proxy_command }}
          #Host {{ hostvars[item].ansible_host }}
              #Hostname {{ item }}
              #User {{ hostvars[item].ansible_user }}
              #StrictHostKeyChecking no
              #{{ hostvars[item].ssh_proxy_command }}
        #marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item }}"
      #with_items: "{{ groups.mycluster }}"

    #- name: "Add host to /etc/hosts"
      #become: yes
      #blockinfile:
        #dest: /etc/hosts
        #insertafter: EOF
        #block: |
          #{{ hostvars[item].ansible_host }} {{ item }}
        #marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ item }}"
      #with_items: "{{ groups.appcluster }}"

- name: Check connectivity to hosts
  hosts: cluster
  gather_facts: false
  tasks:
    - name: Wait for connection to be available on hosts before proceeding
      wait_for_connection:

- name: Common setup for all hosts
  hosts: cluster
  become: true
  tasks:

    - name: Add NZ locale to all instances
      locale_gen:
        name: en_NZ.UTF-8
        state: present

- name: Set up the bastion hosts
  hosts: bastion
  become: true
  serial: 1
  tasks:
    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
      with_items: "{{ groups.appcluster }}"


- name: Set up web hosts with mapping to backend
  hosts: web
  become: true
  vars:
    group_index: "{{ inventory_hostname | regexp_search('.*(\\d+)$') }}"
  tasks:
    - name: Map each frontend host to speak to a specific backend
      lineinfile:
        dest: /etc/hosts
        line: "{{ groups.app[ group_index | int ].ansible_host }} backend"


#- name: Extra set up for web demo
  #hosts: "loadbalancer"
  #become: true
  #gather_facts: false
  #tasks:

    #- name: "Add fake domain to /etc/hosts"
      #delegate_to: localhost
      #become: yes
      #blockinfile:
        #dest: /etc/hosts
        #insertafter: EOF
        #block: |
          #{{ floating_ip }} my-app.cat
        #marker: "# {mark} ANSIBLE MANAGED BLOCK for my-app.cat"

