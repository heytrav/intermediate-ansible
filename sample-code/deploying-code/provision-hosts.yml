---
- name: Provision a set of hosts in the Catalyst Cloud
  hosts: cluster
  gather_facts: false
  run_once: true
  tasks:
    - block:
        - name: Connect to Catalyst Cloud
          os_auth:
            cloud: "{{ cloud_name }}"
        - name: Create keypair
          os_keypair:
            cloud: "{{ cloud_name }}"
            name: "{{ keypair_name }}"
            public_key: "{{ ssh_public_key }}"

        - name: Create Network
          os_network:
            cloud: "{{ cloud_name }}"
            name: "{{ network_name }}"
            state: present

        - name: Create subnet
          os_subnet:
            cloud: "{{ cloud_name }}"
            name: "{{ subnet_name }}"
            network_name: "{{ network_name }}"
            state: present
            cidr: "{{ subnet_cidr }}"
            allocation_pool_start: "{{ subnet_dhcp_start }}"
            allocation_pool_end: "{{ subnet_dhcp_end }}"
            ip_version: 4
            dns_nameservers: "{{ default_nameservers }}"

        - name: Create router
          os_router:
            cloud: "{{ cloud_name }}"
            state: present
            name: "{{ router_name }}"
            network: "{{ public_net_name }}"
            interfaces:
              - "{{ subnet_name }}"
          run_once: true
      delegate_to: localhost

- name: Provision a set of hosts in the Catalyst Cloud
  hosts: cluster
  gather_facts: false
  serial: 1
  tasks:
    - block:
        - name: Connect to Catalyst Cloud
          os_auth:
            cloud: "{{ cloud_name }}"


        - name: Create security groups
          os_security_group:
            cloud: "{{ cloud_name }}"
            state: present
            name: "{{ item }}"
          with_items: "{{ security_group_names }}"

        - name: Add rules for security group
          os_security_group_rule:
            cloud: "{{ cloud_name }}"
            state: present
            security_group: "{{ item.group }}"
            protocol: "{{ item.proto | default('tcp') }}"
            port_range_min: "{{ omit if item.port == 'any' else item.port }}"
            port_range_max: "{{ omit if item.port == 'any' else item.port_end | default(item.port) }}"
            remote_ip_prefix: "{{ item.remote_ip_prefix | default(omit) }}"
            remote_group: "{{ item.remote_group | default(omit) }}"
          with_items: "{{ security_groups }}"

      delegate_to: localhost


- name: Provision a set of hosts in the Catalyst Cloud
  hosts: cluster
  gather_facts: false
  serial: 1
  tasks:
    - block:
        - name: Connect to Catalyst Cloud
          os_auth:
            cloud: "{{ cloud_name }}"

        - name: Create cluster instances
          os_server:
            cloud: "{{ cloud_name }}"
            state: present
            name: "{{ inventory_hostname }}"
            image: "{{ default_os_image }}"
            key_name: "{{ keypair_name  }}"
            flavor: "{{ default_flavor }}"
            auto_ip: "{{ assign_floating_ip | default('no') }}"
            nics:
              - net-name: "{{ network_name }}"
            security_groups: "{{ security_group_names | join(',')}}"
            meta:
              inventory_hostname: "{{ inventory_hostname }}"
              groups: "{{ group_names | join(',') }}"
            userdata: |
                      #cloud-config
                      datasource:
                        OpenStack:
                          metadata_urls: ["http://169.254.169.254"]
                          max_wait: -1
                      users:
                        - name: "{{ ansible_user }}"
                          shell: /bin/bash
                          lock_passwd: true
                          sudo: ALL=(ALL) NOPASSWD:ALL
                          ssh_authorized_keys:
                            - "{{ ssh_public_key }}"
          register: launch

        - name: Append info for launched machines to host info
          add_host:
            name: "{{ launch.openstack.name }}"
            ansible_host: "{{ launch.openstack.public_v4 | default(launch.openstack.private_v4, true) }}"
            public_v4: "{{ launch.openstack.public_v4 | default(omit) }}"
            private_v4: "{{ launch.openstack.private_v4 }}"

        - name: Make sure loadbalancer uses private v4
          add_host:
            name: "{{ inventory_hostname }}"
            ansible_host: "{{ private_v4 }}"
          when: "'loadbalancer' in group_names"

        - name: Remove IP from all machines from known hosts
          known_hosts:
            name: "{{ item }}"
            state: absent
          with_items:
            - "{{ ansible_host }}"
            - "{{ inventory_hostname }}"

      delegate_to: localhost



#- name: Add ssh config and local /etc/hosts mapping for hosts
  #hosts: cluster
  #serial: 1
  #gather_facts: false
  #tasks:
    #- block:
      #- name: "Add cluster to local ~/.ssh/config"
        #blockinfile:
          #dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
          #insertafter: EOF
          #block: |
            #Host {{ ansible_host }}
                #User {{ ansible_user }}
                #StrictHostKeyChecking no
                #{{ ssh_proxy_command }}
          #marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"

      #- name: "Add host to /etc/hosts"
        #become: yes
        #blockinfile:
          #dest: /etc/hosts
          #insertafter: EOF
          #block: |
            #{{ ansible_host }} {{ inventory_hostname }}
          #marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"
      #delegate_to: localhost


#- name: Add bastion public ip to known_hosts
  #hosts: bastion
  #gather_facts: false
  #tasks:
    #- block:
        #- name: Perform SSH keyscan to add to known_hosts
          #shell: ssh-keyscan {{ ansible_host }}
          #register: bastion_ssh_key

        #- name: Add ssh key to known_hosts
          #known_hosts:
            #name: "{{ ansible_host }}"
            #key: "{{ item }}"
            #state: present
          #with_items: "{{ bastion_ssh_key.stdout_lines }}"

        #- name: Wait for bastion to be reachable over SSH
          #wait_for_connection:

      #delegate_to: localhost

- name: Check connectivity to hosts
  hosts: cluster:!bastion
  gather_facts: false
  tasks:

    - name: Wait for connection to be available on hosts before proceeding
      wait_for_connection:
      delegate_to: localhost

- name: Set up the bastion hosts
  hosts: bastion
  become: true
  serial: 1
  tasks:
    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
      with_items: "{{ groups.appcluster }}"


- name: Common setup for all hosts
  hosts: cluster
  become: true
  tasks:

    - name: Add NZ locale to all instances
      locale_gen:
        name: en_NZ.UTF-8
        state: present

- name: Set up the bastion hosts
  hosts: bastion
  become: true
  tasks:
    - name: Add entry to /etc/hosts for all instances
      lineinfile:
        dest: /etc/hosts
        line: "{{ hostvars[item].ansible_host }} {{ item }}"
      with_items: "{{ groups.appcluster }}"


- name: Set up web hosts with mapping to backend
  hosts: web
  become: true
  serial: 1
  tasks:
    - name: Map each of the frontend hosts in the loadbalancer
      lineinfile:
        dest: /etc/hosts
        line: "{{ ansible_host }} frontend{{ group_index }}"
      delegate_to: "{{ groups.loadbalancer.0 }}"


- name: Add mapping for db on app boxes
  hosts: db
  become: true
  tasks:

    - name: Map each app host to speak to db
      lineinfile:
        dest: /etc/hosts
        line: "{{ ansible_host }} {{ inventory_hostname }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups.web }}"



- name: Extra set up for web demo
  hosts: loadbalancer
  become: true
  gather_facts: false
  tasks:

    - name: "Add fake domain to /etc/hosts"
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ public_v4 }} my-app.cat
        marker: "# {mark} ANSIBLE MANAGED BLOCK for my-app.cat"
      delegate_to: localhost

