---

- name: Preflight hosts
  hosts: bastion
  gather_facts: false
  tasks:

    - name: Set ansible_host to be private ipv4
      add_host:
        name: "{{ openstack.metadata.name }}"
        ansible_host: "{{ openstack.public_v4 }}"
        groups: "inplace_update,{{ group_names | join(',') }}"
      when: 
        - openstack is defined
        - openstack.metadata.training_machine == prefix

- name: Preflight hosts
  hosts: cluster:!bastion
  gather_facts: false
  serial: 1
  tasks:

    - name: Set ansible_host to be private ipv4
      add_host:
        name: "{{ openstack.metadata.name }}"
        ansible_host: "{{ openstack.private_v4 }}"
        groups: "inplace_update,{{ group_names | join(',')  }}"
      when: 
        - openstack is defined
        - openstack.metadata.training_machine == prefix

  
- name: Upgrade application in place
  become: true
  hosts: app:&inplace_update
  serial: 1
  any_errors_fatal: true
  vars:
    web_server: "{{ inventory_hostname | regex_replace('^(.*)app(\\d+)$', '\\1web\\2') }}"
    db_host: "{{ groups.db | intersect(groups.inplace_update) | first  }}"
  tags:
    - app
  tasks:

    - name: "Disable {{ web_server }}  at load balancer"
      haproxy:
        backend: catapp-backend
        host: "{{ web_server }}"
        state: disabled
      delegate_to: "{{ groups.loadbalancer | intersect(groups.inplace_update) | first  }}"
    - name: Stop the gunicorn service
      systemd:
        name: gunicorn
        state: stopped

    - name: Make sure service has stopped
      wait_for:
        port: 5000
        delay: 10
        state: drained


    - name: Checkout application from git
      git:
        repo: https://github.com/heytrav/sample-flask-app.git
        dest: "{{ app_directory }}"
        version: "{{ app_version | default('master') }}"
      notify: start gunicorn
    
    - name: Add app config
      template:
        src: templates/config.py.j2
        dest: "{{ app_directory }}/config.py"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: 0644
      notify: restart gunicorn

    - name: Install app requirements
      pip:
        requirements: "{{ app_directory }}/requirements.txt"
        virtualenv: "{{ app_directory }}/venv"
        virtualenv_python: /usr/bin/python3

    - name: Install gunicorn
      pip:
        name: gunicorn
        virtualenv: "{{ app_directory }}/venv"

    - name: Add systemd config
      template:
        src: templates/gunicorn.service.j2
        dest: /etc/systemd/system/gunicorn.service
        owner: root
        group: root
        mode: 0644
      notify: start gunicorn

    - meta: flush_handlers

    - name: Make sure gunicorn is accepting connections
      wait_for:
        port: 5000
        delay: 10
        timeout: 60

    - name: "Re-enable {{ web_server }} at load balancer"
      haproxy:
        backend: catapp-backend
        host: "{{ web_server }}"
        state: enabled
      delegate_to: "{{ groups.loadbalancer | intersect(groups.inplace_update) | first  }}"


  handlers:
    - name: start gunicorn
      systemd:
        name: gunicorn
        state: started

    - name: restart gunicorn
      systemd:
        name: gunicorn
        state: restarted

